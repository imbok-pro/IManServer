CREATE OR REPLACE PACKAGE SP.MO
-- Models package
-- by Gracheva Irina
-- This file is distributed under Apache License 2.0 (01.2004).
--   http://www.apache.org/licenses/
-- create 27.10.2010
-- update 19.11.2010 23.11.2010 16.12.2010 24.11.2011 09.12.2011 29.12.2011
--        11.01.2012 17.01.2012 27.01.2012 
-- by Nikolay Krasilnikov
--        07.02.2012 25.08.2013 29.08.2013 22.06.2014 03.07.2014 26.10.2014
--        04.11.2014 10.11.2014 11.11.2014 13.11.2014 25.11.2014 31.03.2015
--        21.05.2015 25.05.2015 21.09.2015 09.08.2016-10.08.2016 27.10.2016
--        17.04.2017 03.05.2017 03.07.2017 07.09.2017 16.11.2017 01.12.2017
--        11.01.2018 16.01.2018 25.01.2019 23.07.2019-25.07.2019 13.11.2020
--        18.01.2021 31.01.2021 30.07.2021 01.08.2021

-- Функции для работы с объектами модели SP.V_MODEL_OBJECTS
AS

TYPE TParRec is record
(
NAME VARCHAR2(128),
VAL SP.TVALUE
);
TYPE TPars is table of TParRec;
-- Расширенный вариант записи параметра объекта модели.
TYPE TViewParRec is record
(
 -- Идентификатор параметра в модели или нулл, если параметр не переопределён
 ID NUMBER,
 -- Имя параметра
 PARAM_NAME SP.MODEL_OBJECT_PAR_S.NAME%type,
 -- Идентификатор прообраза параметра в каталоге или нулл,
 -- если параметр отсутствует у объекта прообраза.
 OBJ_PAR_ID NUMBER,
 -- Идентификатор типа параметра
 TYPE_ID NUMBER,
 -- Имя типа параметра
 TYPE_NAME SP.PAR_TYPES.NAME%type,
 -- Идентификатор модификатора параметра 
 R_ONLY_ID NUMBER,
 -- Модификатор параметра
 R_ONLY VARCHAR2(100),
 -- Признак наличия у типа набора значений 
 SET_OF_VALUES NUMBER(1),
 -- Значение параметра, используемое по умолчанию 
 D_VAL VARCHAR2(4000), 
 -- Текущее значение параметра
 VAL VARCHAR2(4000),
 -- Имя значения 
 E_VAL SP.OBJECT_PAR_S.E_VAL%type,
 -- Поля значения
 N NUMBER,
 D DATE,
 S VARCHAR2(4000),
 X NUMBER,
 Y NUMBER,
 -- Идентификатор Группы
 GROUP_ID NUMBER,
 -- Имя Группы
 GROUP_NAME SP.GROUPS.NAME%type,
 -- Дата изменения и пользователь
 M_DATE DATE, M_USER VARCHAR(30)
);
TYPE TObjectPars is table of TViewParRec;
 
-- Корневой объект текущей модели. Корневые объекты моделей в принципе могут 
-- различаться, и при переключении моделей этот объект можно изменять.
CurModelHRootObject SP.G.TMACRO_PARS;
-- Функция предоставляет корневой объект модели,
-- не путать с текущим опорным объектом.
FUNCTION GET_MODEL_HROOT return SP.G.TMACRO_PARS;

-- Получение полного пути к объекту по идентификатору объекта модели.
FUNCTION FULL_NAME(ModObjID in NUMBER) 
return VARCHAR2;

-- Получение полного пути к объекту по стороннему идентификатору объекта
-- модели.
FUNCTION FULL_NAME(OID in VARCHAR2, ModelID in NUMBER) 
return VARCHAR2;

-- Получение полного пути к объекту по стороннему идентификатору объекта
-- модели.
-- Текущая модель берётся из глобального параметра.
FUNCTION FULL_NAME(OID in VARCHAR2) 
return VARCHAR2;

-- Получение имени связи по идентификатору объекта модели.
FUNCTION REL_NAME(ModObjID in NUMBER) 
return VARCHAR2;

-- Процедура присваивает значение связи по её строковому значению.
-- Строковое значение это: <имя модели>=><полное имя объекта>,
-- если нет разделителя "=>", то используется текущая модель полное имя,
-- или "<имя модели>=OID><OID объекта>",
-- если нет имени модели(=OID><OID объекта>),
-- то используется текущая модель.
PROCEDURE S2R(S in VARCHAR2, V in out NOCOPY SP.TVALUE);

-- Получение идентификатора объекта модели, по его полному имени.
-- Если объект - корень иерархии, то его идентификатор будет "1".
-- Если имя относительное, то при поиске объекта будет учтён текущий
-- опорный объект.
FUNCTION MOD_OBJ_ID_BY_FULL_NAME(
  ModelID in NUMBER,
  FullName in VARCHAR2)
return NUMBER;

-- Получение идентификатора объекта модели, по его полному имени.
-- Если объект - корень иерархии, то его идентификатор будет "1".
-- Если имя относительное, то при поиске объекта будет учтён текущий
-- опорный объект.
FUNCTION MOD_OBJ_ID_BY_FULL_NAME(
  ModelName in VARCHAR2,
  FullName in VARCHAR2)
return NUMBER;

-- Получение идентификатора объекта модели, по его полному имени.
-- Если объект - корень иерархии, то его идентификатор будет "1".
-- Если имя относительное, то при поиске объекта будет учтён текущий
-- опорный объект.
-- Текущая модель берётся из глобального параметра.
FUNCTION MOD_OBJ_ID_BY_FULL_NAME(FullName in VARCHAR2)
return NUMBER;

-- Получение идентификатора объекта модели, по его стороннему идентификатору.
FUNCTION MOD_OBJ_ID_BY_OID(
  ModelID in NUMBER,
  OID in VARCHAR2)
return NUMBER;

-- Получение идентификатора объекта модели, по его стороннему идентификатору.
-- Текущая модель берётся из глобального параметра.
FUNCTION MOD_OBJ_ID_BY_OID(OID in VARCHAR2)
return NUMBER;

-- Процедура нормализует параметры "NAME" и "PATH". 
-- Параметр "NAME" преобразуется в короткое имя,
-- а параметр "PARENT" получает значение с учётом текущего пути
-- и параметра "NAME".
-- Функция не производит ни каких действий, если в наборе параметров
-- присутствуeт параметр "ID" и он не нулл.
-- Для заполнения параметров объекта необходимо использовать SP.IM.FILL_OBJECT. 
PROCEDURE NORM_PATH(ModelObject in out SP.G.TMacro_Pars); 

-- Получение идентификатора объекта модели.
-- Текущая модель берётся из глобального параметра.
-- Если присутствует и определён параметр (ID), то поиск производим по нему.
-- Если отсутствует и неопределён параметр (ID), но присутствует и определён
-- параметр (ОID), то используем его.
-- Если отсутствуют и неопределёны параметры (ID и OID), то производим поиск по
-- паре (PID и NAME(OLD_NAME)) или ((POID и NAME(OLD_NAME)), если эти параметры
-- определены.
-- Если параметров нет, они неопределены или не нашли объект,
-- то ищем объект по полному имени с учётом текущего корня.
-- Если объект - корень иерархии, то его идентификатор будет "1".
FUNCTION MOD_OBJ_ID(ModelObject in SP.G.TMacro_Pars, ObjectOID out VARCHAR2)
return NUMBER;

-- Получение идентификатора родителя объекта модели.
-- Для поиска используем параметры, перечисленные в порядке понижения
-- приоритета: "PID", "POID", "PARENT"
-- Игнорируем наличие параметра, если он неопределён.
-- Если родитель отсутствует, то возвращаемый параметр ObjectPath содержит
-- полное имя родителя с оконечным символом "/".
-- Если параметр NewParent равен true, то ищем нового родителя,
-- определённого параметрами, перечисленными впорядке понижения приоритета:
--  "NEW_PID", "NEW_POID" или  "NEW_PARENT".
-- Если родитель есть корень иерархии, то возвращаемое значение будет "1".
-- Текущая модель берётся из глобального параметра.
FUNCTION PARENT_OBJ_ID(ModelObject in SP.G.TMacro_Pars, 
                       ObjectPath out VARCHAR2,
                       NewParent in boolean default false)
return NUMBER;

-- Добавление или изменение объекта текущей модели и его параметров.
-- Параметры "OID" и "POID" имееют приоритет над именами, если они определены.
-- Если параметр "OldName" или "OID" не нулл, то сначала производится попытка
-- переименования объекта, а если старый объект отсутствует,
-- то объект добавляется.
-- Если в модели отсутствует родительский объект, то строятся объекты 
-- заменители на основании параметра "PARENT" и текущего
-- опорного объекта.
-- Если параметр объекта Delete равен true, то в все сторонние параметры,
-- кроме присутствующих в массиве ModelObject, будут удалены, 
-- а у остальных, кроме присутствующих в массиве ModelObject, 
-- значения примут значения по умолчанию.
-- Функция возвращает идентификатор объекта.
FUNCTION MERGE_OBJECT(ModelObject in SP.G.TMacro_Pars, CatalogID in NUMBER)
return NUMBER;

-- Изменение объекта текущей модели. 
-- Функция не добавляет объект, если он не существует!
-- Параметры OID и POID имеют приоритет над именами, если они определены,
-- а входной параметр ModelObjectID над ними.
-- Если объект существует, то происходит его обновление.
-- Если параметр объекта Delete равен true, то в все сторонние параметры,
-- кроме присутствующих в массиве ModelObject, будут удалены, 
-- а у остальных, кроме присутствующих в массиве ModelObject, 
-- значения примут значения по умолчанию.
-- Функция возвращает идентификатор объекта или NULL если объект не существует.
FUNCTION UPDATE_OBJECT(ModelObject in SP.G.TMacro_Pars, CatalogID in NUMBER,
                       ModelObjectID in NUMBER default null)
return NUMBER;

-- Процедура обновляет параметры объекта модели.
-- Если второй параметр равен нулл,
-- то получаем идентификатор объекта из параметров объекта, при этои
-- параметры ID и OID имеют приоритет над именем,
-- если они существуют и определены.
-- Если параметр объекта Delete равен true, то в все сторонние параметры,
-- кроме присутствующих в массиве ModelObject, будут удалены, 
-- а у остальных, кроме присутствующих в массиве ModelObject, 
-- значения примут значения по умолчанию.
PROCEDURE UPDATE_OBJECT_PARS(ModelObject in SP.G.TMacro_Pars,
                             ModelObjectID in NUMBER default null);
                                             
-- Изменение параметров типа "примечания" у объекта модели.
-- Параметр OID имеет приоритет над именем, если определён.
-- Если параметр объекта Delete равен true, то в все примечания,
-- кроме присутствующих в параметре ModelObject, будут удалены.
-- Процедура НЕ выдаёт ошибку при отсутствии объекта в модели.
PROCEDURE UPDATE_NOTES(ModelObject in SP.G.TMACRO_PARS);

-- Изменение короткого имени объекта модели.
-- Параметры ID и OID имеют приоритет перед полным именем при определении
-- объекта, если они определены.
-- Процедура НЕ выдаёт ошибку при отсутствии объекта в модели.
PROCEDURE RENAME_OBJECT(ModelObject in SP.G.TMACRO_PARS);

-- Изменение полного имени объекта модели.
-- Процедура НЕ выдаёт ошибку при отсутствии объекта в модели.
PROCEDURE RENAME_OBJECT_BY_OLD_NAME(OldFullName in VARCHAR2,
                                    FinalFullName in VARCHAR2);

-- Изменение короткого имени объекта модели по его идентификатору.
-- Текущая модель берётся из глобального параметра.
-- Процедура НЕ выдаёт ошибку при отсутствии объекта в модели.
PROCEDURE RENAME_OBJECT_BY_OID(OID in VARCHAR2, ShortName in VARCHAR2);

-- Изменение родителя объекта. 
-- Процедура НЕ выдаёт ошибку при отсутствии объекта в модели.
PROCEDURE CHANGE_PARENT(ModelObject in SP.G.TMACRO_PARS);

-- Изменение родителя объекта модели по идентификаторам. 
-- Процедура НЕ выдаёт ошибку при отсутствии объекта в модели.
-- Текущая модель берётся из глобального параметра.
PROCEDURE CHANGE_PARENT(OID in VARCHAR2, POID in VARCHAR2);

-- Удаление объекта модели.
-- Параметры ID и OID имеют приоритет перед полным именем при определении
-- объекта, если они определены.
PROCEDURE DELETE_OBJECT(ModelObject in SP.G.TMACRO_PARS);

-- Удаление объекта модели по его полному имени.
PROCEDURE DELETE_OBJECT_BY_NAME(FullName in VARCHAR2);

-- Удаление объекта модели по его стороннему идентификатору.
-- Текущая модель берётся из глобального параметра.
PROCEDURE DELETE_OBJECT_BY_OID(OID in VARCHAR2);

-- Удаление объектов модели по списку полных имён.
PROCEDURE DELETE_OBJECTS(FullNames in SP.G.TNAMES);

-- Удаление объектов модели по таблице полных имён.
PROCEDURE DELETE_OBJECTS(FullNames in SP.TSTRINGS);

-- Удаление объектов модели по таблице OID.
-- Текущая модель берётся из глобального параметра.
PROCEDURE DELETE_OBJECTS(OIDs in SP.TSHORTSTRINGS);

-- Функция предоставляет объекты текущей модели
-- с учётом текущего опорного объекта.
-- Если параметр не равен 0, то возвращаем дерево, начиная с текущего опорного
-- объекта, при любом другом значении без него. 
FUNCTION CUR_MODEL_OBJECTS(withRoot in NUMBER default 1) 
return SP.TMODEL_OBJECTS pipelined;

-- Функция используется для создания интерфейса построения связей на клиенте.
-- Функция предоставляет множестро детей объекта, если он не лист,
-- или множество соседей, если объект лист.
-- Список значений начинается с родительского объекта,
-- что означает переход на уровень выше.
-- null  означает  неопределённую ссылку.
-- При выборе значений функция использует глобальную переменную SP.TG.CurValue.
-- Если значение связи не определено, то функция возвращает перечень моделей,
-- начинающийся с псевдомодели "CURRENT".
FUNCTION REL_S return SP.TS_VALUES_COMMENTS pipelined;

-- Функция извлекает объект со всеми его свойствами по его ID.
-- Функция не проверяет принадлежит ли объект текущей модели!
FUNCTION GET_MODEL_OBJECT(ObjectID in NUMBER) return SP.G.TMACRO_PARS;

-- Функция извлекает объект.
-- Функция не проверяет принадлежит ли объект текущей модели!
-- Если ObjectID - null, то ищем объект по свойствам объекта, находящимся в
-- составне массива PARS.
-- При этом параметры ID и OID имеют приоритет перед полным именем при
-- определении объекта, если они определены.
-- Если параметр TINY равен null, то используем свойство TINY из массива PARS.   
PROCEDURE GET_MODEL_OBJECT(PARS in out nocopy  SP.G.TMACRO_PARS, 
                           ObjectID in NUMBER,
                           TINY in BOOLEAN);
                           
-- Устаревший вызов, оставлен для совестимости
-- Функция извлекает объект по его ID.
-- Функция не проверяет принадлежит ли объект текущей модели!
FUNCTION GET_MODEL_OBJECT(ObjectID in NUMBER,
                          -- признак, получения лишь базовых свойств объекта.
                          TINY in BOOLEAN)
return SP.G.TMACRO_PARS;

-- Функция предоставляет набор параметров объекта в виде курсора.
-- Names - список имён параметров, которые необходимы
-- или нулл, чтобы получить все
FUNCTION GET_MODEL_OBJECT_PARS(Object_ID in NUMBER,
                               Names in SP.TSTRINGS default null) 
return TPars pipelined;

-- Функция предоставляет расширенный набор параметров объекта в виде курсора.
-- Может использоваться для организации представлений редактирования параметров
FUNCTION GET_V_MODEL_OBJECT_PARS(Object_ID in NUMBER) 
return TObjectPars pipelined;

-- Изменение класса объекта модели.
-- Корректное изменение класса объекта с сохранением идентификатора объекта
-- и истории значений его параметров. 
PROCEDURE CHANGE_OBJECT_CLASS(ModelObjectID in NUMBER, NewCatalogID in NUMBER);

-- Получение идентификатора объекта каталога, по параметру типа TUsed_Object.
-- Функция используется при импорте внешней модели.
-- Функция возвращает "null", если объект каталога не найден.
FUNCTION GET_CATALOG_OBJECT(Used_Object in TVALUE) return NUMBER;

-- Получение идентификатора объекта каталога, по параметру типа строка.
-- Функция возвращает "null", если объект каталога не найден.
-- Строка может содержать OID либо "Полное имя объекта"
FUNCTION GET_CATALOG_OBJECT(Used_Object in VARCHAR2) return NUMBER;

-- Функция извлекает все свойства объекта каталога по его ID.
FUNCTION GET_CATALOG_OBJECT(ObjectID in NUMBER) return SP.G.TMACRO_PARS;

end MO;
/
